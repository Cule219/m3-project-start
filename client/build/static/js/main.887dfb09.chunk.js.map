{"version":3,"sources":["framework/IAction.ts","components/NavBar.tsx","components/Login.tsx","state/appState.ts","reducer/appReducer.ts","components/Register.tsx","components/SimpleAsset.tsx","components/ShowAssets.tsx","App.tsx","serviceWorker.ts","framework/CS.ts","index.tsx"],"names":["ActionType","nav","props","exact","to","Login","onSubmit","this","handleSubmit","htmlFor","type","placeholder","onChange","handleUsernameChange","value","window","CS","getBMState","user","username","handlePasswordChange","password","event","target","action","update_user","clientAction","preventDefault","uiAction","server_called","axios","post","getDBServerURL","then","res","user_created","console","log","data","Component","initial","UI","counter","loggedIn","waitingForResponse","BM","firstname","lastname","assets","reducerFunctions","reducer","state","newState","JSON","parse","stringify","reducerFunction","undefined","INIT","updateAction","Register","handleFirstnameChange","handleLastnameChange","asset_updated","update_asset","assetToChange","filter","asset","_id","asset_name","asset_value","delete_asset","deleteAction","assetsToKeep","SimpleAsset","handleSwitchToEditMode","bind","handleNameChange","handleValueChange","handleSave","handleRerenderTest","handleDelete","edit_mode","edit","name","onClick","id","getUIState","setState","newAsset","put","render_test","React","PureComponent","create_asset","push","ShowAssets","handleCreateAsset","toString","map","key","mongoose","Types","ObjectId","add_assets_from_server","App","get","response","responseAction","catch","error","NavBar","path","component","Boolean","location","hostname","match","reduxMiddleware","__REDUX_DEVTOOLS_EXTENSION__","compose","applyMiddleware","ReduxThunk","store","message","getState","createStore","dispatch","initializeStore","ReactDOM","render","stateCounter","document","getElementById","getStore","subscribe","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.887dfb09.chunk.js","sourcesContent":["export enum ActionType {\n    INIT = \"@@INIT\",\n    update_user = \"update_user\",\n    user_created = \"user_created\",\n    user_exists = \"user_exists\",\n    create_asset = \"create_asset\",\n    update_asset = \"update_asset\",\n    delete_asset = \"delete_asset\",\n    render_test = \"render_test\",\n    server_called = \"server_called\",\n    asset_updated = \"asset_updated\",\n    add_assets_from_server = \"add_assets_from_server\" \n}\nexport interface IAction {\n    type: ActionType;\n}\n","import * as React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst nav = ( props: any ) => {\n    return (\n        <nav>\n            <ul>\n                <li><NavLink exact={true} to=\"/\">Login</NavLink></li>\n                <li><NavLink to=\"/register\">Register</NavLink></li>\n                <li><NavLink to=\"/showassets\">Assets</NavLink></li>\n            </ul>\n        </nav>\n    )\n}\nexport default nav;","import React, { Component } from 'react'\nimport { ActionType, IAction } from '../framework/IAction';\nimport axios from 'axios';\nimport { IWindow } from '../framework/IWindow';\nimport { IUserAction } from './Register';\ndeclare let window: IWindow;\n\n\nexport default class Login extends Component {\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n            <label htmlFor=\"username\">Username:</label>\n            <input type=\"username\" placeholder=\"Your username\" onChange={this.handleUsernameChange} value={window.CS.getBMState().user.username} />\n            <br />\n            <label htmlFor=\"password\">Password:</label>\n            <input type=\"password\" placeholder=\"********\" onChange={this.handlePasswordChange} value={window.CS.getBMState().user.password} />\n            <br />\n            <input type=\"submit\" value=\"Login\" />\n        </form>\n\n        )\n    }\n\n    handleUsernameChange(event: any) {\n        let user = window.CS.getBMState().user;\n        user.username = event.target.value\n        const action: IUserAction = {\n            type: ActionType.update_user,\n            user: user\n        }\n        window.CS.clientAction(action);\n    }\n    handlePasswordChange(event: any) {\n        let user = window.CS.getBMState().user;\n        user.password = event.target.value\n        const action: IUserAction = {\n            type: ActionType.update_user,\n            user: user\n        }\n        window.CS.clientAction(action);\n    }\n\n    handleSubmit(event: any) {\n        event.preventDefault();\n        const uiAction: IAction = {\n            type: ActionType.server_called\n        }\n        window.CS.clientAction(uiAction);\n        axios.post(window.CS.getDBServerURL() + '/signup', window.CS.getBMState().user)\n            .then(res => {\n                const uiAction: IAction = {\n                    type: ActionType.user_created\n                }\n                window.CS.clientAction(uiAction);\n\n                console.log(res.data)\n            });\n    }\n\n\n}\n","export interface IUser {\n    firstname:string;\n    lastname:string;\n    username:string;\n    password:string;\n}\n\nexport interface IUI{\n    counter: number;\n    loggedIn: boolean;\n    waitingForResponse:boolean;\n}\n\nexport interface IAssetData {\n    _id: string;\n    asset_name: string;\n    asset_value: number;\n  }\n\nexport interface IBM{\n    user:IUser;\n    assets:IAssetData[]\n}\n\n\nexport interface IState{\n    UI:IUI;\n    BM:IBM;\n}\n\n// initial state \nexport const initial:IState = {\n\tUI: {\n\t\tcounter: 0,\n\t\tloggedIn: false,\n\t\twaitingForResponse: false,\n    },\n\tBM: {\n        user:{\n            firstname:\"\",\n            lastname:\"\",\n            username:\"\",\n            password:\"\"\n        },\n        assets:[]\n\t}\n};\n","import { initial, IState } from '../state/appState'\nimport { IWindow } from '../framework/IWindow'\nimport { IAction, ActionType } from '../framework/IAction'\n\ndeclare let window: IWindow;\n\nexport const reducerFunctions:any = {};\n\nexport const reducer = (state = initial, action: IAction) => {\n    window.CS.log(\"2. ACTION:\" + action.type);\n    let newState:IState = JSON.parse(JSON.stringify(state)) as IState;\n    newState.UI.counter = state.UI.counter + 1;\n    const reducerFunction = reducerFunctions[action.type];\n\tif (reducerFunction !== undefined) {\n\t\treducerFunction(newState,action);\n        return newState;\n    }\n    switch (action.type) {\n        case ActionType.INIT:\n            return newState;\n        default:\n            window.CS.log(\"1. Error!!!!! no reducer defined\");\n            return newState;\n    }\n}\n\n","import React, { Component } from 'react'\nimport { ActionType, IAction } from '../framework/IAction';\nimport { IState, IUser } from '../state/appState'\nimport axios from 'axios';\nimport { IWindow } from '../framework/IWindow';\nimport { reducerFunctions } from '../reducer/appReducer';\ndeclare let window: IWindow;\n\nexport interface IUserAction extends IAction {\n    user: IUser\n}\n\nreducerFunctions[ActionType.update_user] = function (newState: IState, updateAction: IUserAction) {\n    console.log(updateAction.user);\n    newState.BM.user = updateAction.user;\n    return newState\n}\nreducerFunctions[ActionType.user_created] = function (newState: IState, updateAction: IUserAction) {\n    console.log(updateAction.user);\n    newState.UI.waitingForResponse = false;\n    newState.UI.loggedIn = true ;\n    return newState\n}\nexport default class Register extends Component {\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <label htmlFor=\"firstname\">First name:</label>\n                    <input type=\"text\" placeholder=\"firstname\" onChange={this.handleFirstnameChange} value={window.CS.getBMState().user.firstname} />\n                    <br />\n                    <label htmlFor=\"lastname\">Last name:</label>\n                    <input type=\"text\" placeholder=\"lastname\" onChange={this.handleLastnameChange} value={window.CS.getBMState().user.lastname} />\n                    <br />\n                    <label htmlFor=\"username\">Username:</label>\n                    <input type=\"username\" placeholder=\"Your username\" onChange={this.handleUsernameChange} value={window.CS.getBMState().user.username} />\n                    <br />\n                    <label htmlFor=\"password\">Password:</label>\n                    <input type=\"password\" placeholder=\"********\" onChange={this.handlePasswordChange} value={window.CS.getBMState().user.password} />\n                    <br />\n                    <input type=\"submit\" value=\"Register as new User\" />\n                </form>\n            </div>\n        )\n    }\n\n    handleFirstnameChange(event: any) {\n        let user = window.CS.getBMState().user;\n        user.firstname = event.target.value\n        const action: IUserAction = {\n            type: ActionType.update_user,\n            user: user\n        }\n        window.CS.clientAction(action);\n    }\n    handleLastnameChange(event: any) {\n        let user = window.CS.getBMState().user;\n        user.lastname = event.target.value\n        const action: IUserAction = {\n            type: ActionType.update_user,\n            user: user\n        }\n        window.CS.clientAction(action);\n    }\n    handleUsernameChange(event: any) {\n        let user = window.CS.getBMState().user;\n        user.username = event.target.value\n        const action: IUserAction = {\n            type: ActionType.update_user,\n            user: user\n        }\n        window.CS.clientAction(action);\n    }\n    handlePasswordChange(event: any) {\n        let user = window.CS.getBMState().user;\n        user.password = event.target.value\n        const action: IUserAction = {\n            type: ActionType.update_user,\n            user: user\n        }\n        window.CS.clientAction(action);\n    }\n    handleSubmit(event: any) {\n        event.preventDefault();\n        const uiAction: IAction = {\n            type: ActionType.server_called\n        }\n        window.CS.clientAction(uiAction);\n        axios.post(window.CS.getDBServerURL() + '/signup', window.CS.getBMState().user)\n            .then(res => {\n                const uiAction: IAction = {\n                    type: ActionType.user_created\n                }\n                window.CS.clientAction(uiAction);\n\n                console.log(res.data)\n            });\n    }\n}\n","import React from 'react';\nimport { IAssetAction } from './ShowAssets';\nimport { ActionType, IAction } from '../framework/IAction';\nimport { IAssetData, IState } from '../state/appState'\nimport axios from 'axios';\n\nimport { IWindow } from '../framework/IWindow';\nimport { reducerFunctions } from '../reducer/appReducer';\ndeclare let window: IWindow;\n\n//this file defines the React component that renders a single asset to the browser window\n//it also contains the logic to change asset properties and save the changes to the database\n//most of the used React framework features are already explained in the comments of App.js\n//so this code hopefully mostly explains itself ...\n\ninterface IProps {\n    edit: boolean;\n    asset: IAssetData;\n}\n\ninterface IJSXState {\n    edit_mode: boolean;\n}\n\nreducerFunctions[ActionType.asset_updated] = function (newState: IState, updateAction: IAssetAction) {\n    newState.UI.waitingForResponse=false;\n}\nreducerFunctions[ActionType.update_asset] = function (newState: IState, updateAction: IAssetAction) {\n    let assetToChange: IAssetData[] = newState.BM.assets.filter(asset => asset._id === updateAction.asset._id)\n    console.log(assetToChange);\n    assetToChange[0].asset_name = updateAction.asset.asset_name;\n    assetToChange[0].asset_value = updateAction.asset.asset_value;\n    return newState;\n}\nreducerFunctions[ActionType.delete_asset] = function (newState: IState, deleteAction: IAssetAction) {\n    let assetsToKeep: IAssetData[] = newState.BM.assets.filter(asset => asset._id !== deleteAction.asset._id)\n    newState.BM.assets = assetsToKeep;\n    return newState;\n}\n\n\nexport default class SimpleAsset extends React.PureComponent<IProps, IJSXState> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.handleSwitchToEditMode = this.handleSwitchToEditMode.bind(this);\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleValueChange = this.handleValueChange.bind(this);\n        this.handleSave = this.handleSave.bind(this);\n        this.handleRerenderTest = this.handleRerenderTest.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n\n        this.state = {\n            edit_mode: props.edit,\n        }\n    }\n\n    render() {\n\n        //if the component is in edit mode, it will render different than if it just shows the data\n        if (this.state.edit_mode)\n            return (\n                <tr>\n                    <td><input type=\"text\" name=\"name\" value={this.props.asset.asset_name} onChange={this.handleNameChange} /></td>\n                    <td><input type=\"number\" name=\"value\" value={this.props.asset.asset_value} onChange={this.handleValueChange} /> €</td>\n                    <td>\n                        <button onClick={this.handleSave} id={this.props.asset._id}>save</button>\n                        <button onClick={this.handleRerenderTest} >increase State Counter</button>\n                    </td>\n                </tr>\n            )\n        else\n            return (\n                <tr>\n                    <td>{this.props.asset.asset_name}</td>\n                    <td>{this.props.asset.asset_value} €</td>\n                    <td>\n                        <button onClick={this.handleSwitchToEditMode}>edit</button>\n                        <button onClick={this.handleDelete} id={this.props.asset._id}>sell or dispose</button>\n                        <button onClick={this.handleRerenderTest} >increase State Counter {window.CS.getUIState().counter}</button>\n                    </td>\n                </tr>\n            )\n    }\n    handleSwitchToEditMode() {\n        this.setState({ edit_mode: true });\n    }\n    handleNameChange(event: any) {\n        const newAsset = this.props.asset;\n        newAsset.asset_name = event.target.value\n        const action: IAssetAction = {\n            type: ActionType.update_asset,\n            asset: newAsset\n        }\n        window.CS.clientAction(action);\n    }\n    handleValueChange(event: any) {\n        const newAsset = this.props.asset;\n        newAsset.asset_value = event.target.value;\n        const action: IAssetAction = {\n            type: ActionType.update_asset,\n            asset: newAsset\n        }\n        window.CS.clientAction(action);\n    }\n    handleSave(event: any) {\n        this.setState({ edit_mode: false });\n        const uiAction: IAction = {\n            type: ActionType.server_called\n          }\n          window.CS.clientAction(uiAction);\n        axios.put(window.CS.getDBServerURL()+'/assets/update/' + this.props.asset._id, this.props.asset)\n        .then(res => {\n            const uiAction: IAction = {\n                type: ActionType.asset_updated\n              }\n              window.CS.clientAction(uiAction);\n        });\n    }\n    handleDelete() {\n        const uiAction: IAction = {\n            type: ActionType.server_called\n          }\n          window.CS.clientAction(uiAction);\n          axios.post(window.CS.getDBServerURL()+'/assets/delete/' + this.props.asset._id)\n          .then(res => {\n            const action: IAssetAction = {\n                type: ActionType.delete_asset,\n                asset: this.props.asset\n            }\n            window.CS.clientAction(action)\n          });\n    }\n    handleRerenderTest(event: any) {\n        const action: IAction = {\n            type: ActionType.render_test,\n        }\n        window.CS.clientAction(action);\n    }\n}","import React, { Component } from 'react'\n\nimport SimpleAsset from './SimpleAsset'\nimport mongoose from 'mongoose';\nimport { IAction, ActionType } from '../framework/IAction';\nimport {IAssetData,IState} from '../state/appState'\nimport axios from 'axios';\nimport { reducerFunctions } from '../reducer/appReducer';\n\nimport { IWindow } from '../framework/IWindow'\ndeclare let window: IWindow;\n\ninterface IProps{};\ninterface IJSXState { };\nexport interface IAssetAction extends IAction {\n  asset: IAssetData\n}\nreducerFunctions[ActionType.create_asset] = function (newState: IState, action: IAssetAction) {\n  newState.BM.assets.push(action.asset);\n  newState.UI.waitingForResponse=false;\n  return newState;\n}\n\nexport default class ShowAssets extends Component<IProps, IJSXState> {\n    constructor(props: any) {\n        console.log(\"new App component will be initialized\");\n        super(props);\n        this.handleCreateAsset = this.handleCreateAsset.bind(this);\n      }\n    render() {\n        return (\n            <div>\n          <p> {window.CS.getUIState().waitingForResponse.toString()}{window.CS.getUIState().counter}</p>\n          <h1>simple asset management application</h1>\n          <p>to create a new asset click this button:&nbsp;\n            <button onClick={this.handleCreateAsset}>create asset</button>\n          </p>\n          <table>\n            <tbody>\n              <tr><th>description</th><th>value</th><th>action</th></tr>\n              {window.CS.getBMState().assets.map(asset => <SimpleAsset key={asset._id} asset={asset} edit={false} />)}\n            </tbody>\n          </table>\n        </div>\n        )\n    }\n    handleCreateAsset() {\n        console.log(\"handleCreateAsset invoked\");\n        const uiAction: IAction = {\n          type: ActionType.server_called\n        }\n        window.CS.clientAction(uiAction);\n        const newAsset: IAssetData = {\n          _id: mongoose.Types.ObjectId().toString(),\n          asset_name: \"\",\n          asset_value: 0\n        }\n        const action: IAssetAction = {\n          type: ActionType.create_asset,\n          asset: newAsset\n        }\n        axios.post(window.CS.getDBServerURL()+'/assets/add', newAsset)\n        .then(res => {\n          window.CS.clientAction(action);\n          console.log(res.data)\n        });\n      }\n}\n","import React from 'react';\nimport NavBar from './components/NavBar';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport ShowAssets from './components/ShowAssets';\nimport { Switch, Route } from 'react-router-dom';\nimport { IAction, ActionType } from './framework/IAction';\nimport { IAssetData, IState } from './state/appState'\nimport axios from 'axios';\nimport { reducerFunctions } from './reducer/appReducer';\n\nimport { IWindow } from './framework/IWindow'\ndeclare let window: IWindow;\n\ninterface IProps {\n  stateCounter: number\n}\n\nexport interface IAssetsLoadedAction extends IAction {\n  assets: IAssetData[]\n}\nreducerFunctions[ActionType.server_called] = function (newState: IState, action: IAction) {\n  newState.UI.waitingForResponse = true;\n  return newState;\n}\nreducerFunctions[ActionType.add_assets_from_server] = function (newState: IState, action: IAssetsLoadedAction) {\n  newState.UI.waitingForResponse = false;\n  newState.BM.assets = action.assets;\n  return newState;\n}\nexport default class App extends React.PureComponent<IProps> {\n\n  componentDidMount() {\n    const uiAction: IAction = {\n      type: ActionType.server_called\n    }\n    window.CS.clientAction(uiAction);\n    axios.get(window.CS.getDBServerURL()+'/assets/read').then(response => {\n      console.log(\"this data was loaded as a result of componentDidMount:\");\n      console.log(response.data);\n      const responseAction: IAssetsLoadedAction = {\n        type: ActionType.add_assets_from_server,\n        assets: response.data as IAssetData[]\n      }\n      window.CS.clientAction(responseAction);\n    }).catch(function (error) { console.log(error); })\n  }\n\n  render() {\n    window.CS.log(\"App --> render()\")\n    return (\n      <>\n        <NavBar />\n        <Switch>\n          <Route path=\"/showassets\" component={ShowAssets} />\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/\" component={Login} />\n        </Switch>\n\n      </>\n    );\n  }\n\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport { reducer } from '../reducer/appReducer'\nimport ReduxThunk from 'redux-thunk';\n\nimport { IUI, IBM } from '../state/appState';\nimport { IWindow } from './IWindow'\nimport { IAction } from './IAction';\ndeclare let window: IWindow;\n\n//Dev tools are needed so we can see the state in the browser\n//Redux thunk is needed for actions that make a rest call in order to create another action, when the server responds\nlet reduxMiddleware: any;\nif (window.__REDUX_DEVTOOLS_EXTENSION__) {\n    reduxMiddleware = compose(\n        applyMiddleware(ReduxThunk),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    );\n} else { reduxMiddleware = applyMiddleware(ReduxThunk); }\n\n\nexport class CS {\n    private store: any;\n    public log(message: string) {\n        console.log(message);\n    }\n    public getStore(){\n        return this.store;\n    }\n    public getState() {\n        return this.store.getState();\n    }\n    public getUIState() {\n        return this.getState().UI as IUI;\n    }\n    public getBMState() {\n        return this.getState().BM as IBM;\n    }\n    public initializeStore() {\n        this.store = createStore(\n            reducer,\n            reduxMiddleware\n        );\n    }\n   //changed this to any because of the thunk returning a function ...\n   public clientAction(action:IAction | Function){\n    this.store.dispatch(action);\n    }\n    public getDBServerURL(){\n        return \"https://patricks-boilerplate.herokuapp.com/\";\n        // return \"http://localhost:3000\";\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n//import framework components\n//CS: ClientServices, we will use them a lot, so to shorten the code they are just called: CS\nimport { CS } from './framework/CS';\n//we will add a CS instance to the window object.\n//We also want the window object strictly typed, so we declare that window has the type \"IWindow\"\nimport { IWindow } from './framework/IWindow'\ndeclare let window: IWindow;\nwindow.CS = new CS();\n//we create the inital Application State\nwindow.CS.initializeStore();\n\n//now we can render this state to the DOM using React\nReactDOM.render(\n  <Router >\n  <App stateCounter={window.CS.getUIState().counter} />\n  </Router>\n, document.getElementById('root'));\n\n\n//whenever there is a new state, we render the whole virtual DOM again\n//React will take care that only the differences from the previous and\n//the current virtual DOM will be rendered to the browser DOM\nwindow.CS.getStore().subscribe(() => {\n  window.CS.log(\"3. before render ---------------------------------------------\");\n  ReactDOM.render(<Router >\n                  <App stateCounter={window.CS.getUIState().counter} />\n                  </Router>, document.getElementById('root'));\n  window.CS.log(\"3. after render ---------------------------------------------\");\n});\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}